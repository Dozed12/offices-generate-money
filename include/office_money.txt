defineVariable(int, n);
defineVariable(int, i);
defineVariable(int, k);
defineVariable(Building, building);
defineVariable(float, value);
defineVariable(float, price);
defineVariable(float, factor);
defineVariable(float, price_inertia);
defineVariable(int, population);
defineVariable(int, workers);
defineVariable(float, services);
defineVariable(int, demand);
defineVariable(int, supply);
defineVariable(int, difference);
defineVariable(int, money_rub);
defineVariable(int, money_usd);
defineVariable(int, money_rub_add);
defineVariable(int, money_usd_add);
defineVariable(float, current_price_rub);
defineVariable(float, current_price_usd);

defineArray(int[10], rub_ticks);
defineArray(int[10], usd_ticks);
defineVariable(int, rub_sum);
defineVariable(int, usd_sum);

defineVariable(int, j);
// Worker for which we are computing the fee
defineVariable(Person, worker);
defineVariable(int, worker_id);
// Education multiplier of generated services.
defineVariable(float, service_scale);

defineVariable(int, random_is_fire);
defineVariable(int, random_building_id);
defineVariable(vec3, vector);

defineFunction(CalculateDemand, int)
{
	population = 0;
	for (i=0, i<n, i=i+1)
	{
		building.GetDataByIndex(i);
		if(building.nType ? BUILDINGTYPE_LIVING)
		{
			population = population + building.nWorkersNum;
		}
	}
	workers = PositivePartInt(population - FREE_CITIZENS);
	demand = PositivePartFloat(workers * INTERNAL_DEMAND_FACTOR);
	if(year - START_YEAR < GRACE_YEARS)
	{
		demand = (1 - GRACE_FACTOR ^ (year - START_YEAR + 1)) * demand;
	}
	return(demand);
}
defineFunction(CalculateSupply, int)
{
	services = 0.0;
	for (i=0, i<n, i=i+1)
	{
		building.GetDataByIndex(i);
		if(building.nType ? BUILDINGTYPE_CITYHALL)
		{
		    // For each worker currently in the building, add some services
			for (j=0, j<building.nWorkersNum, j=j+1)
			{
				// Obtain the worker
				Building_Workers_GetID(i, j, worker_id);
				worker.GetDataByIndex(worker_id);
				
				//  The money we get from uneducated workers is diminished
				//  while the number of educated is increased
				service_scale = PRIMARY_ED_FACTOR;
				if (worker.fEducation>1.999) {
					service_scale = UNIVERSITY_ED_FACTOR;
				}
				services = services + service_scale;
			}
		}
	}
	supply = services;
	return(supply);
}
//currency: 1 - rubles, 0 - dollars, excess: >0 - export, <0 - import
defineFunction(Price, float, int:currency, int:excess) 
{
	price_inertia = supply + BASE_FOREIGN_SUPPLY_DEMAND + FOREIGN_SUPPLY_DEMAND_FACTOR * population;
	factor = 1.0 - excess / price_inertia;
	if(excess > 0)
	{
		price = factor * (currency * PRICE_SELL_RUB + (1 - currency) * PRICE_SELL_USD);
	}
	else()
	{
		price = factor * (currency * PRICE_BUY_RUB + (1 - currency) * PRICE_BUY_USD);
	}
	return(price);
}
defineFunction(MakePeopleAngry, void, float:unpaid_services)
{
	for(i=0, i<population, i=i+1)
	{
		worker.GetDataByIndex(i);
		Person_SetStatus(i, 0, worker.fStatusHappiness - unpaid_services * UNHAPPINESS_FACTOR / 10) //decrease happiness
		Person_SetStatus(i, 3, worker.fStatusSoviet - unpaid_services * LOYALTY_FACTOR / 10) //decrease loyalty
		Person_SetStatus(i, 10, worker.fStatusCrime + unpaid_services * CRIME_FACTOR / 10) //increase crime
	}
	//increased probability of fire
	if(FIRE_PROB_DENOMINATOR > 0)
	{
		Random(random_is_fire);
		random_is_fire = random_is_fire % FIRE_PROB_DENOMINATOR;
		if(random_is_fire ? 1)
		{
			Random(random_building_id);
			random_building_id = random_building_id % n;
			building.GetDataByIndex(random_building_id);
			vector = building.vPosition;
			Building_StartFire(random_building_id);
			Notification_CreateNewStringPic(
			"Insufficient services",
			"Lack of overseeing has led to an incident in one of our buildings. The building is on fire.",
			"services_icon.png",
			vector);
		}
	}
	returnVoid();
}
defineFunction(Money, void, float:rub, float:usd)
{
	InitConstants();
	InitSettings();
	rub_sum = 0;
	usd_sum = 0;
	year = START_YEAR;
	while (1 ? 1)
	{
		for(k=0, k<10, k=k+1)
		{
			Building_GetNumberOfBuildings(n);
			Money_GetRUB(money_rub);
			Money_GetUSD(money_usd);
			demand = CalculateDemand();
			supply = CalculateSupply();
			difference = supply - demand;
			current_price_rub = ScaledRUB(Price(1, difference));
			current_price_usd = ScaledUSD(Price(0, difference));
			money_rub_add = PositivePartInt(difference) * rub * current_price_rub * 0.1;
			money_usd_add = PositivePartInt(difference) * usd * current_price_usd * 0.1;
			money_rub_add = money_rub_add - PositivePartInt(-difference) * rub * current_price_rub * 0.1;
			money_usd_add = money_usd_add - PositivePartInt(-difference) * usd * current_price_usd * 0.1;
			if (-money_rub_add < money_rub)
			{
				Money_AddRUB(money_rub_add);
			}
			else()
			{
				MakePeopleAngry(rub * ModuleFloat(difference * 1.0 / demand));
			}
			if (-money_usd_add < money_usd)
			{
				Money_AddUSD(money_usd_add);
			}
			else()
			{
				MakePeopleAngry(usd * ModuleFloat(difference * 1.0 / demand));
			}
			rub_ticks[k] = money_rub_add;
			usd_ticks[k] = money_usd_add;
			Objectives_ClearAll();
			if (INTERNAL_DEMAND_FACTOR > 0)
			{
				//show the internal supply and demand for services
				Objectives_CreateNewString("services", "Services");
				Objective_AddRequirement("services", demand * 1.0, "services_icon.png");
				Objective_UpdateRequirement("services", 0, supply * 1.0);
			}
			//show the service market price
			Objectives_CreateNewString("service_price", "Current service price");
			Objective_AddRequirement("service_price", 0.0, "editor/currency_ruble.png");
			Objective_UpdateRequirement("service_price", 0, current_price_rub);
			Objective_AddRequirement("service_price", 0.0, "editor/currency_dollar.png");
			Objective_UpdateRequirement("service_price", 1, current_price_usd);
			
			//show the services balance last day
			Objectives_CreateNewString("services_balance", "Daily services balance");
			Objective_AddRequirement("services_balance", 0.0, "editor/currency_ruble.png");
			Objective_UpdateRequirement("services_balance", 0, rub_sum * 1.0);
			Objective_AddRequirement("services_balance", 0.0, "editor/currency_dollar.png");
			Objective_UpdateRequirement("services_balance", 1, usd_sum * 1.0);
			Script_Sleep(5.5);
		}
		rub_sum = 0;
		usd_sum = 0;
		for(i=0, i<10, i = i+1)
		{
			rub_sum = rub_sum + rub_ticks[i];
			usd_sum = usd_sum + usd_ticks[i];
		}
	}
	returnVoid();
}
