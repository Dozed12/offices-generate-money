defineVariable(int, n);
defineVariable(int, m);
defineVariable(int, i);
defineVariable(int, j);
defineVariable(int, k);
defineVariable(int, l);
defineVariable(Building, building);
defineVariable(Building, building2);
defineVariable(Vehicle, vehicle);
defineVariable(float, value);
defineVariable(float, price);
defineVariable(float, factor);
defineVariable(float, price_inertia);
defineVariable(int, population);
defineVariable(int, workers);
defineVariable(float, services);
defineVariable(int, demand);
defineVariable(float, demand_vehicles);
defineVariable(float, vehicle_cost);
defineVariable(int, supply);
defineVariable(int, difference);
defineVariable(int, money_rub);
defineVariable(int, money_usd);
defineVariable(int, money_rub_add);
defineVariable(int, money_usd_add);
defineVariable(float, current_price_rub);
defineVariable(float, current_price_usd);
defineVariable(int, is_active);
defineVariable(int, rub_sum);
defineVariable(int, usd_sum);
defineVariable(int, rub_sum2);
defineVariable(int, usd_sum2);

// Worker for which we are computing the fee
defineVariable(Person, worker);
defineVariable(int, worker_id);
// Education multiplier of generated services.
defineVariable(float, service_scale);

defineVariable(int, random_is_fire);
defineVariable(int, random_building_id);
defineVariable(vec3, vector);

defineFunction(CalculateVehicleDemand, float)
{
	Vehicle_GetNumberOfVehicles(m);
	demand_vehicles = 0.0;
	for (i=0, i<m, i=i+1)
	{
		vehicle.GetDataByIndex(i);
		vehicle_cost = 0.0;
		if(vehicle.nTransportType ? RESOURCE_TRANSPORT_PASSANGER)
		{
			//for passenger vehicles, the cost is determined per 10 passengers
			vehicle_cost = vehicle.fResourceCapacity / 10.0;
		}
		elseif(vehicle.nTransportType > -1 & vehicle.nTransportType < RESOURCE_TRANSPORT_NUM)
		{
			//for freight vehicles, the cost is determined per 1 t
			vehicle_cost = vehicle.fResourceCapacity;
		}
		//road vehicles
		if(vehicle.nVehicleType > 0 & vehicle.nVehicleType < 3)
		{
			if(month > 2 & month < 8 & vehicle.nSkill[0] ? VEHICLESKILL_SEEDING)
			{
				//seeding vehicles need more services during the season
				demand_vehicles = demand_vehicles + BASE_COST_SEEDING;
			}
			elseif(month > 7 & month < 12 & vehicle.nSkill[0] ? VEHICLESKILL_HARVESTING)
			{
				//harvesting vehicles need more services during the season
				demand_vehicles = demand_vehicles + BASE_COST_HARVESTING;
			}
			elseif((month > 11 | month < 3) & vehicle.nSkill[0] ? VEHICLESKILL_SNOWPLOW)
			{
				//snowplowing vehicles need more services during the season
				demand_vehicles = demand_vehicles + BASE_COST_SNOWPLOWING;
			}
			elseif(vehicle.nSkill[0] ? VEHICLESKILL_PERSONAL)
			{
				//personal cars don't need that many services
				demand_vehicles = demand_vehicles + BASE_COST_PERSONAL;
			}
			else()
			{
				demand_vehicles = demand_vehicles + BASE_COST_ROAD + COST_ROAD_FACTOR * vehicle_cost;
			}
		}
		//trains
		elseif(vehicle.nVehicleType < 6)
		{
			demand_vehicles = demand_vehicles + BASE_COST_RAIL + COST_RAIL_FACTOR * vehicle_cost;
		}
		//ships
		elseif(vehicle.nVehicleType ? VEHICLETYPE_SHIP)
		{
			demand_vehicles = demand_vehicles + BASE_COST_SHIP + COST_SHIP_FACTOR * vehicle_cost;
		}
		//planes, helicopters
		elseif(vehicle.nVehicleType ? VEHICLETYPE_AIRPLANE | vehicle.nVehicleType ? VEHICLETYPE_HELICOPTER)
		{
			demand_vehicles = demand_vehicles + BASE_COST_AIR + COST_AIR_FACTOR * vehicle_cost;
		}
	}
	return(demand_vehicles);
}
defineFunction(CalculateDemand, int)
{
	population = 0;
	for (i=0, i<n, i=i+1)
	{
		building.GetDataByIndex(i);
		if(building.nType ? BUILDINGTYPE_LIVING & building.fPercFinished ? 1.0)
		{
			is_active = 1;
			for(j=0, j<building.nWalkingBuildingNum & is_active ? 0, j = j+1)
			{
				Building_WalkingBuilding_GetID(i, j, l);
				building2.GetDataByIndex(l);
				if(!(building2.nType ? BUILDINGTYPE_LIVING | building2.nType ? BUILDINGTYPE_CHURCH) & building2.nWorkersNum > 0)
				{
					is_active = 1;
				}
			}
			population = population + is_active * building.nWorkersNum;
		}
	}
	workers = MaxInt(population - FREE_CITIZENS, 0);
	demand = MaxFloat(workers * INTERNAL_DEMAND_FACTOR, 0.0);
	demand = demand + CalculateVehicleDemand();
	if(year - START_YEAR < GRACE_YEARS)
	{
		demand = (1 - GRACE_FACTOR ^ (year - START_YEAR + 1)) * demand;
	}
	return(demand);
}
defineFunction(CalculateSupply, int)
{
	services = 0.0;
	for (i=0, i<n, i=i+1)
	{
		building.GetDataByIndex(i);
		if(building.nType ? BUILDINGTYPE_CITYHALL & building.fPercFinished ? 1.0)
		{
		    // For each worker currently in the building, add some services
			for (j=0, j<building.nWorkersNum, j=j+1)
			{
				// Obtain the worker
				Building_Workers_GetID(i, j, worker_id);
				worker.GetDataByIndex(worker_id);
				
				//  The money we get from uneducated workers is diminished
				//  while the number of educated is increased
				service_scale = PRIMARY_ED_FACTOR;
				if (worker.fEducation>1.999) {
					service_scale = UNIVERSITY_ED_FACTOR;
				}
				services = services + service_scale;
			}
		}
	}
	if(building.fEletric_Voltage < 0.9)
	{
		services = services * NO_POWER_FACTOR;
	}
	supply = services;
	return(supply);
}
//currency: 1 - rubles, 0 - dollars, excess: >0 - export, <0 - import
defineFunction(Price, float, int:currency, int:excess) 
{
	price_inertia = supply + BASE_FOREIGN_SUPPLY_DEMAND + FOREIGN_SUPPLY_DEMAND_FACTOR * population;
	factor = 1.0 - excess / price_inertia;
	if(excess > 0)
	{
		price = factor * (currency * PRICE_SELL_RUB + (1 - currency) * PRICE_SELL_USD) / (100 ^ NUMBER_OF_PRICE_DECREASES);
	}
	else()
	{
		price = factor * (currency * PRICE_BUY_RUB + (1 - currency) * PRICE_BUY_USD) / (100 ^ NUMBER_OF_PRICE_DECREASES);
	}
	return(price);
}
defineFunction(MakePeopleAngry, void, float:unpaid_services)
{
	for(i=0, i<population, i=i+1)
	{
		worker.GetDataByIndex(i);
		Person_SetStatus(i, 0, MaxFloat(worker.fStatusHappiness - unpaid_services * UNHAPPINESS_FACTOR / 10.0, 0.0)) //decrease happiness
		Person_SetStatus(i, 3, MaxFloat(worker.fStatusSoviet - unpaid_services * LOYALTY_FACTOR / 10.0, 0.0)) //decrease loyalty
		Person_SetStatus(i, 10, MinFloat(worker.fStatusCrime + unpaid_services * CRIME_FACTOR / 10.0, 1.0))//increase crime
	}
	//increased probability of fire
	if(FIRE_PROB_DENOMINATOR > 0)
	{
		Random(random_is_fire);
		random_is_fire = random_is_fire % FIRE_PROB_DENOMINATOR;
		if(random_is_fire ? 1)
		{
			Random(random_building_id);
			random_building_id = random_building_id % n;
			building.GetDataByIndex(random_building_id);
			vector = building.vPosition;
			Building_StartFire(random_building_id);
			Notification_CreateNewStringPic(
			"Insufficient services",
			"Lack of overseeing has led to an incident in one of our buildings. The building is on fire.",
			"services_icon.png",
			vector);
		}
	}
	returnVoid();
}
defineFunction(Money, void, float:rub, float:usd)
{
	InitConstants();
	InitSettings();
	//check correctness of the constants in the settings file
	INFLATION_RUB = MaxFloat(INFLATION_RUB, 1.0);
	INFLATION_USD = MaxFloat(INFLATION_USD, 1.0);
	PRICE_BUY_RUB = MaxFloat(PRICE_BUY_RUB, 0.0);
	PRICE_BUY_USD = MaxFloat(PRICE_BUY_USD, 0.0);
	PRICE_SELL_RUB = MaxFloat(PRICE_SELL_RUB, 0.0);
	PRICE_SELL_USD = MaxFloat(PRICE_SELL_USD, 0.0);
	FOREIGN_SUPPLY_DEMAND_FACTOR = MaxFloat(FOREIGN_SUPPLY_DEMAND_FACTOR, 0.0);
	PRIMARY_ED_FACTOR = MaxFloat(PRIMARY_ED_FACTOR, 0.0);
	UNIVERSITY_ED_FACTOR = MaxFloat(UNIVERSITY_ED_FACTOR, 0.0);
	year = START_YEAR;
	rub_sum = 0;
	usd_sum = 0;
	while (1 ? 1)
	{
		rub_sum2 = 0;
		usd_sum2 = 0;
		for(k=0, k<10, k=k+1)
		{
			Script_EnterCriticalSection();
			Building_GetNumberOfBuildings(n);
			Money_GetRUB(money_rub);
			Money_GetUSD(money_usd);
			demand = CalculateDemand();
			supply = CalculateSupply();
			difference = supply - demand;
			current_price_rub = ScaledRUB(Price(1, difference));
			current_price_usd = ScaledUSD(Price(0, difference));
			money_rub_add = MaxFloat(difference, 0.0) * rub * current_price_rub * 0.1;
			money_usd_add = MaxFloat(difference, 0.0) * usd * current_price_usd * 0.1;
			money_rub_add = money_rub_add - MaxFloat(-difference, 0.0) * rub * current_price_rub * 0.1;
			money_usd_add = money_usd_add - MaxFloat(-difference, 0.0) * usd * current_price_usd * 0.1;
			if (-1.0 * money_rub_add < money_rub & CAN_IMPORT_SERVICES > 0)
			{
				Money_AddRUB(money_rub_add);
			}
			elseif(rub > 0.0)
			{
				MakePeopleAngry(rub * ModuleFloat(difference * 1.0 / demand));
			}
			if (-1.0 * money_usd_add < money_usd & CAN_IMPORT_SERVICES > 0)
			{
				Money_AddUSD(money_usd_add);
			}
			elseif(usd > 0.0)
			{
				MakePeopleAngry(usd * ModuleFloat(difference * 1.0 / demand));
			}
			rub_sum2 = rub_sum2 + money_rub_add;
			usd_sum2 = usd_sum2 + money_usd_add;
			Objective_Remove("services");
			Objective_Remove("service_price");
			Objective_Remove("services_balance");
			if(INFORMATION_SHOWN > 0)
			{
				if(INTERNAL_DEMAND_FACTOR > 0 & INFORMATION_SHOWN > 1)
				{
					//show the internal supply and demand for services
					Objectives_CreateNewString("services", "Services");
					Objective_AddRequirement("services", demand * 1.0, "services_icon.png");
					Objective_UpdateRequirement("services", 0, supply * 1.0);
				}
				if(INFORMATION_SHOWN > 1 & CAN_IMPORT_SERVICES > 0)
				{
					//show the service market price
					Objectives_CreateNewString("service_price", "Current service price");
					Objective_AddRequirement("service_price", 0.0, "editor/currency_ruble.png");
					Objective_UpdateRequirement("service_price", 0, current_price_rub);
					Objective_AddRequirement("service_price", 0.0, "editor/currency_dollar.png");
					Objective_UpdateRequirement("service_price", 1, current_price_usd);
				}
				//show the services balance last day
				Objectives_CreateNewString("services_balance", "Daily services balance");
				Objective_AddRequirement("services_balance", 0.0, "editor/currency_ruble.png");
				Objective_UpdateRequirement("services_balance", 0, rub_sum * 1.0);
				Objective_AddRequirement("services_balance", 0.0, "editor/currency_dollar.png");
				Objective_UpdateRequirement("services_balance", 1, usd_sum * 1.0);
			}
			Script_LeaveCriticalSection();
			Script_Sleep(5.0);
		}
		rub_sum = rub_sum2;
		usd_sum = usd_sum2;
	}
	returnVoid();
}
